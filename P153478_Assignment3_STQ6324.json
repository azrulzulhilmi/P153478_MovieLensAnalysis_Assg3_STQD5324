{"paragraphs":[{"text":"%md\n## MovieLens Dataset Analysis Report\n### Azrul Zulhilmi bin Ahamd Rosli\n### P153478\n### Assignment3\n### Lecturer: Dr Bernard","dateUpdated":"2025-06-19T02:43:15+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>MovieLens Dataset Analysis Report</h2>\n<h3>Azrul Zulhilmi bin Ahamd Rosli</h3>\n<h3>P153478</h3>\n<h3>Assignment3</h3>\n<h3>Lecturer: Dr Bernard</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995017_1385261310","id":"20250618-083156_590251443","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8049"},{"text":"%md\n## Introduction\nThe MovieLens dataset provides a rich source of information on user preferences and behavior, particularly in relation to movie ratings and demographics. This report explores different dimensions of the dataset to uncover actionable insights that can support strategic decision in content curation, improving user engagement, and enhancing the overall user experience on the MovieLens platform.\n\n## Dataset Overview\nThe MovieLens dataset is organized into three main tables: movie_details, movie_ratings, and user_details. These tables include structured information on movie features (such as titles, release years, and genres), user-submitted ratings, and demographic data (including age, gender, occupation, and zip code). This structure allows for systematic analysis of user interactions with movies, revealing patterns and trends that are useful for deeper understanding and informed decision-making.","dateUpdated":"2025-06-19T02:43:15+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Introduction</h2>\n<p>The MovieLens dataset provides a rich source of information on user preferences and behavior, particularly in relation to movie ratings and demographics. This report explores different dimensions of the dataset to uncover actionable insights that can support strategic decision in content curation, improving user engagement, and enhancing the overall user experience on the MovieLens platform.</p>\n<h2>Dataset Overview</h2>\n<p>The MovieLens dataset is organized into three main tables: movie_details, movie_ratings, and user_details. These tables include structured information on movie features (such as titles, release years, and genres), user-submitted ratings, and demographic data (including age, gender, occupation, and zip code). This structure allows for systematic analysis of user interactions with movies, revealing patterns and trends that are useful for deeper understanding and informed decision-making.</p>\n"}]},"apps":[],"jobName":"paragraph_1750300995018_1386415557","id":"20250618-083603_1771727293","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8050"},{"text":"%md\n### Connect Cassandra to Zeppelin","dateUpdated":"2025-06-19T02:43:15+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Connect Cassandra to Zeppelin</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995019_1386030808","id":"20250618-083829_1741171622","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8051"},{"text":"%md\n### Download the file to a local temp folder","dateUpdated":"2025-06-19T02:43:15+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Download the file to a local temp folder</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995019_1386030808","id":"20250618-084744_1570995601","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8052"},{"text":"%sh\nwget http://media.sundog-soft.com/hadoop/ml-100k/u.user -O /tmp/u.user\nwget http://media.sundog-soft.com/hadoop/ml-100k/u.data -O /tmp/u.data\nwget http://media.sundog-soft.com/hadoop/ml-100k/u.item -O /tmp/u.item\necho \"Download ml-100k dataset is DONE!\"\n","dateUpdated":"2025-06-19T02:43:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/sh","results":{},"enabled":true,"editorSetting":{"language":"sh","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"--2025-06-18 08:59:09--  http://media.sundog-soft.com/hadoop/ml-100k/u.user\nResolving media.sundog-soft.com (media.sundog-soft.com)... 3.5.0.84, 52.216.94.171, 3.5.29.114, ...\nConnecting to media.sundog-soft.com (media.sundog-soft.com)|3.5.0.84|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 22628 (22K) [text/plain]\nSaving to: ‘/tmp/u.user’\n\n     0K .......... .......... ..                              100% 88.3K=0.3s\n\n2025-06-18 08:59:10 (88.3 KB/s) - ‘/tmp/u.user’ saved [22628/22628]\n\n--2025-06-18 08:59:10--  http://media.sundog-soft.com/hadoop/ml-100k/u.data\nResolving media.sundog-soft.com (media.sundog-soft.com)... 52.216.94.171, 52.217.125.65, 52.217.142.193, ...\nConnecting to media.sundog-soft.com (media.sundog-soft.com)|52.216.94.171|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2079229 (2.0M) [application/octet-stream]\nSaving to: ‘/tmp/u.data’\n\n     0K .......... .......... .......... .......... ..........  2%  101K 20s\n    50K .......... .......... .......... .......... ..........  4% 1.09M 10s\n   100K .......... .......... .......... .......... ..........  7%  242K 9s\n   150K .......... .......... .......... .......... ..........  9% 11.2M 7s\n   200K .......... .......... .......... .......... .......... 12%  194K 7s\n   250K .......... .......... .......... .......... .......... 14% 10.9M 6s\n   300K .......... .......... .......... .......... .......... 17%  186K 6s\n   350K .......... .......... .......... .......... .......... 19% 51.0M 5s\n   400K .......... .......... .......... .......... .......... 22%  123M 5s\n   450K .......... .......... .......... .......... .......... 24%  224K 5s\n   500K .......... .......... .......... .......... .......... 27% 6.97M 4s\n   550K .......... .......... .......... .......... .......... 29%  209K 4s\n   600K .......... .......... .......... .......... .......... 32% 3.68M 4s\n   650K .......... .......... .......... .......... .......... 34%  215K 4s\n   700K .......... .......... .......... .......... .......... 36% 3.40M 3s\n   750K .......... .......... .......... .......... .......... 39% 3.83M 3s\n   800K .......... .......... .......... .......... .......... 41%  224K 3s\n   850K .......... .......... .......... .......... .......... 44% 3.55M 3s\n   900K .......... .......... .......... .......... .......... 46%  217K 3s\n   950K .......... .......... .......... .......... .......... 49% 2.74M 3s\n  1000K .......... .......... .......... .......... .......... 51% 6.06M 2s\n  1050K .......... .......... .......... .......... .......... 54%  224K 2s\n  1100K .......... .......... .......... .......... .......... 56% 3.46M 2s\n  1150K .......... .......... .......... .......... .......... 59%  218K 2s\n  1200K .......... .......... .......... .......... .......... 61% 8.87M 2s\n  1250K .......... .......... .......... .......... .......... 64% 3.41M 2s\n  1300K .......... .......... .......... .......... .......... 66%  216K 2s\n  1350K .......... .......... .......... .......... .......... 68% 14.5M 1s\n  1400K .......... .......... .......... .......... .......... 71% 3.44M 1s\n  1450K .......... .......... .......... .......... .......... 73%  217K 1s\n  1500K .......... .......... .......... .......... .......... 76% 4.13M 1s\n  1550K .......... .......... .......... .......... .......... 78% 4.36M 1s\n  1600K .......... .......... .......... .......... .......... 81%  222K 1s\n  1650K .......... .......... .......... .......... .......... 83% 4.05M 1s\n  1700K .......... .......... .......... .......... .......... 86% 4.38M 1s\n  1750K .......... .......... .......... .......... .......... 88%  221K 1s\n  1800K .......... .......... .......... .......... .......... 91% 4.66M 0s\n  1850K .......... .......... .......... .......... .......... 93% 4.35M 0s\n  1900K .......... .......... .......... .......... .......... 96%  221K 0s\n  1950K .......... .......... .......... .......... .......... 98% 5.00M 0s\n  2000K .......... .......... ..........                      100% 4.87M=4.2s\n\n2025-06-18 08:59:15 (478 KB/s) - ‘/tmp/u.data’ saved [2079229/2079229]\n\n--2025-06-18 08:59:15--  http://media.sundog-soft.com/hadoop/ml-100k/u.item\nResolving media.sundog-soft.com (media.sundog-soft.com)... 52.217.122.233, 52.217.230.233, 3.5.29.220, ...\nConnecting to media.sundog-soft.com (media.sundog-soft.com)|52.217.122.233|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 236344 (231K) [application/octet-stream]\nSaving to: ‘/tmp/u.item’\n\n     0K .......... .......... .......... .......... .......... 21%  100K 2s\n    50K .......... .......... .......... .......... .......... 43% 1.11M 1s\n   100K .......... .......... .......... .......... .......... 64%  239K 0s\n   150K .......... .......... .......... .......... .......... 86% 14.0M 0s\n   200K .......... .......... ..........                      100%  127K=1.0s\n\n2025-06-18 08:59:16 (232 KB/s) - ‘/tmp/u.item’ saved [236344/236344]\n\nDownload ml-100k dataset is DONE!\n"}]},"apps":[],"jobName":"paragraph_1750300995020_1384107063","id":"20250618-084957_757107225","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8053"},{"text":"%md\n### Copy Data to HDF\n","dateUpdated":"2025-06-19T02:43:15+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Copy Data to HDF</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995021_1383722314","id":"20250618-085351_305150616","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8054"},{"text":"%sh\nhadoop fs -rm -r -f /tmp/ml-100k\n\nhadoop fs -mkdir /tmp/ml-100k/\n\nhadoop fs -put /tmp/u.user /tmp/ml-100k/\nhadoop fs -put /tmp/u.data /tmp/ml-100k/\nhadoop fs -put /tmp/u.item /tmp/ml-100k/","dateUpdated":"2025-06-19T02:43:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/sh","results":{},"enabled":true,"editorSetting":{"language":"sh","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750300995021_1383722314","id":"20250618-090031_1293939912","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8055"},{"text":"%md\n### Installing Cassandra\n\n```\nsu root\n\ncd /etc/yum.repos.d\n\nvi datastax.repo\n[datastax]\nname=DataStax Repo for Apache Cassandra\nbaseurl=http://rpm.datastax.com/community\nenabled=1\ngpgcheck=0\n\nyum install dsc30\n\nservice cassandra start\n\ncqlsh\n```","dateUpdated":"2025-06-19T02:43:15+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Installing Cassandra</h3>\n<pre><code>su root\n\ncd /etc/yum.repos.d\n\nvi datastax.repo\n[datastax]\nname=DataStax Repo for Apache Cassandra\nbaseurl=http://rpm.datastax.com/community\nenabled=1\ngpgcheck=0\n\nyum install dsc30\n\nservice cassandra start\n\ncqlsh\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1750300995022_1384876561","id":"20250618-090254_484300872","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8056"},{"text":"%md\n### Cassandra shell coding\n### Ensure tables have been created in Cassandra\n\n```\ncqlsh> CREATE KEYSPACE IF NOT EXISTS movielens WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'};\ncqlsh> USE movielens;\n\ncqlsh:movielens> CREATE TABLE IF NOT EXISTS movie_ratings (\n                    user_id int,\n                    movie_id int,\n                    rating int,\n                    timestamp int,\n                    PRIMARY KEY (user_id, movie_id)\n);\n\ncqlsh:movielens> CREATE TABLE IF NOT EXISTS movie_details (\n                       movie_id int,\n                       title text,\n                       release_date text,\n                       video_release_date text,\n                       url text,\n                       unknown int,\n                       action int,\n                       adventure int,\n                       animation int,\n                       children int,\n                       comedy int,\n                       crime int,\n                       documentary int,\n                       drama int,\n                       fantasy int,\n                       film_noir int,\n                       horror int,\n                       musical int,\n                       mystery int,\n                       romance int,\n                       sci_fi int,\n                       thriller int,\n                       war int,\n                       western int,\n                       PRIMARY KEY (movie_id)\n);\n\n\ncqlsh:movielens> CREATE TABLE IF NOT EXISTS user_details (\n                    user_id int,\n                    age int,\n                    gender text,\n                    occupation text,\n                    zip_code text,\n                    PRIMARY KEY (user_id)\n);\n\nexit;\n```","dateUpdated":"2025-06-19T02:50:10+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Cassandra shell coding</h3>\n<h3>Ensure tables have been created in Cassandra</h3>\n<pre><code>cqlsh&gt; CREATE KEYSPACE IF NOT EXISTS movielens WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'};\ncqlsh&gt; USE movielens;\n\ncqlsh:movielens&gt; CREATE TABLE IF NOT EXISTS movie_ratings (\n                    user_id int,\n                    movie_id int,\n                    rating int,\n                    timestamp int,\n                    PRIMARY KEY (user_id, movie_id)\n);\n\ncqlsh:movielens&gt; CREATE TABLE IF NOT EXISTS movie_details (\n                       movie_id int,\n                       title text,\n                       release_date text,\n                       video_release_date text,\n                       url text,\n                       unknown int,\n                       action int,\n                       adventure int,\n                       animation int,\n                       children int,\n                       comedy int,\n                       crime int,\n                       documentary int,\n                       drama int,\n                       fantasy int,\n                       film_noir int,\n                       horror int,\n                       musical int,\n                       mystery int,\n                       romance int,\n                       sci_fi int,\n                       thriller int,\n                       war int,\n                       western int,\n                       PRIMARY KEY (movie_id)\n);\n\n\ncqlsh:movielens&gt; CREATE TABLE IF NOT EXISTS user_details (\n                    user_id int,\n                    age int,\n                    gender text,\n                    occupation text,\n                    zip_code text,\n                    PRIMARY KEY (user_id)\n);\n\nexit;\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1750300995022_1384876561","id":"20250618-090059_162705147","dateCreated":"2025-06-19T02:43:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8057","user":"anonymous","dateFinished":"2025-06-19T02:50:10+0000","dateStarted":"2025-06-19T02:50:10+0000"},{"text":"%md\n## Create RDD for Spark analysis\n### Create Users RDD and DataFrame","dateUpdated":"2025-06-19T02:43:15+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Create RDD for Spark analysis</h2>\n<h3>Create Users RDD and DataFrame</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995022_1384876561","id":"20250618-090952_111254368","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8058"},{"text":"%pyspark\r\n\r\nfrom pyspark.sql import Row\r\n\r\n# ParseInput function\r\ndef parseInput(line):\r\n    fields = line.split('|')\r\n    return Row(user_id=int(fields[0]), age=int(fields[1]), gender=fields[2], occupation=fields[3], zip_code=fields[4])\r\n\r\n# Load raw user data from HDFS\r\nlines = spark.sparkContext.textFile(\"hdfs:///tmp/ml-100k/u.user\")\r\n\r\n# Apply transformation\r\nusers = lines.map(parseInput)\r\n\r\n# Create DataFrame\r\nusersDataset = spark.createDataFrame(users)\r\n\r\n# Write to Cassandra\r\nusersDataset.write \\\r\n    .format(\"org.apache.spark.sql.cassandra\") \\\r\n    .mode(\"append\") \\\r\n    .options(table=\"user_details\", keyspace=\"movielens\") \\\r\n    .save()\r\n\r\n# Read back from Cassandra\r\nreadUsers = spark.read \\\r\n    .format(\"org.apache.spark.sql.cassandra\") \\\r\n    .options(table=\"user_details\", keyspace=\"movielens\") \\\r\n    .load()\r\n\r\nreadUsers.show()","dateUpdated":"2025-06-19T02:43:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+-------------+--------+\n|user_id|age|gender|   occupation|zip_code|\n+-------+---+------+-------------+--------+\n|    201| 27|     M|       writer|   E2A4H|\n|    837| 36|     F|       artist|   55409|\n|    670| 30|     M|   technician|   21114|\n|    570| 26|     M|     educator|   14627|\n|    883| 49|     M|    librarian|   50266|\n|    899| 32|     M|        other|   55116|\n|    360| 51|     M|        other|   98027|\n|    707| 56|     F|    librarian|   19146|\n|     79| 39|     F|administrator|   03755|\n|    210| 39|     M|     engineer|   03060|\n|    505| 27|     F|        other|   20657|\n|     16| 21|     M|entertainment|   10309|\n|    942| 48|     F|    librarian|   78209|\n|    402| 30|     M|     engineer|   95129|\n|     63| 31|     M|    marketing|   75240|\n|    768| 29|     M|administrator|   12866|\n|    725| 21|     M|      student|   91711|\n|    642| 18|     F|      student|   95521|\n|    835| 44|     F|    executive|   11577|\n|    864| 27|     M|   programmer|   63021|\n+-------+---+------+-------------+--------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750300995022_1384876561","id":"20250618-091545_1496934130","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8060"},{"text":"%md\n### Create Ratings RDD and DataFrame","dateUpdated":"2025-06-19T02:43:15+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Create Ratings RDD and DataFrame</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995023_1384491812","id":"20250618-091622_732362982","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8061"},{"text":"%pyspark\r\n\r\nfrom pyspark.sql import Row\r\n\r\n# ParseInput function\r\ndef parseInput2(line):\r\n    fields = line.split('\\t')\r\n    return Row(user_id=int(fields[0]), movie_id=int(fields[1]), rating=int(fields[2]), timestamp=int(fields[3]))\r\n\r\n# Load raw u.data from HDFS\r\nlines = spark.sparkContext.textFile(\"hdfs:///tmp/ml-100k/u.data\")\r\n\r\n# Apply transformation\r\nratings = lines.map(parseInput2)\r\n\r\n# Create DataFrame\r\nratingsDataset = spark.createDataFrame(ratings)\r\n\r\n# Write to Cassandra\r\nratingsDataset.write \\\r\n    .format(\"org.apache.spark.sql.cassandra\") \\\r\n    .mode(\"append\") \\\r\n    .options(table=\"movie_ratings\", keyspace=\"movielens\") \\\r\n    .save()\r\n\r\n\r\nreadRatings = spark.read \\\r\n    .format(\"org.apache.spark.sql.cassandra\") \\\r\n    .options(table=\"movie_ratings\", keyspace=\"movielens\") \\\r\n    .load()\r\n\r\nreadRatings.show()","dateUpdated":"2025-06-19T02:43:15+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+--------+------+---------+\n|user_id|movie_id|rating|timestamp|\n+-------+--------+------+---------+\n|    201|       1|     3|884113635|\n|    201|       2|     2|884112487|\n|    201|       4|     4|884111830|\n|    201|       7|     3|884112201|\n|    201|       8|     3|884141438|\n|    201|       9|     3|884113343|\n|    201|      10|     3|884114169|\n|    201|      11|     4|884112201|\n|    201|      12|     4|884111269|\n|    201|      15|     3|884140670|\n|    201|      17|     3|884112581|\n|    201|      20|     2|884140275|\n|    201|      22|     2|884112201|\n|    201|      23|     4|884111830|\n|    201|      25|     3|884114015|\n|    201|      26|     4|884111927|\n|    201|      27|     3|884140891|\n|    201|      28|     3|884111217|\n|    201|      29|     3|884141053|\n|    201|      31|     1|884114232|\n+-------+--------+------+---------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750300995023_1384491812","id":"20250618-092339_1263889715","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8062"},{"text":"%md\n### Create Movie RDD and DataFrame","dateUpdated":"2025-06-19T02:43:15+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Create Movie RDD and DataFrame</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995023_1384491812","id":"20250618-092348_1082394556","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8063"},{"text":"%pyspark\r\n\r\nfrom pyspark.sql import Row\r\n\r\n# Parse each movie line\r\ndef parse_movie(line):\r\n    fields = line.split('|')\r\n    return Row(\r\n        movie_id=int(fields[0]),\r\n        title=fields[1],\r\n        release_date=fields[2],\r\n        video_release_date=fields[3],\r\n        url=fields[4],\r\n        unknown=int(fields[5]),\r\n        action=int(fields[6]),\r\n        adventure=int(fields[7]),\r\n        animation=int(fields[8]),\r\n        children=int(fields[9]),\r\n        comedy=int(fields[10]),\r\n        crime=int(fields[11]),\r\n        documentary=int(fields[12]),\r\n        drama=int(fields[13]),\r\n        fantasy=int(fields[14]),\r\n        film_noir=int(fields[15]),\r\n        horror=int(fields[16]),\r\n        musical=int(fields[17]),\r\n        mystery=int(fields[18]),\r\n        romance=int(fields[19]),\r\n        sci_fi=int(fields[20]),\r\n        thriller=int(fields[21]),\r\n        war=int(fields[22]),\r\n        western=int(fields[23])\r\n    )\r\n\r\n# Load u.item from HDFS\r\nmovie_lines = spark.sparkContext.textFile(\"hdfs:///tmp/ml-100k/u.item\")\r\n\r\n# Apply transformation\r\nmovies = movie_lines.map(parse_movie)\r\n\r\n# Create DataFrame\r\nmovies_df = spark.createDataFrame(movies)\r\n\r\n# Write to correct Cassandra table: movie_details\r\nmovies_df.write \\\r\n    .format(\"org.apache.spark.sql.cassandra\") \\\r\n    .mode(\"append\") \\\r\n    .options(table=\"movie_details\", keyspace=\"movielens\") \\\r\n    .save()\r\n\r\n# Read back from Cassandra\r\nreadMovies = spark.read \\\r\n    .format(\"org.apache.spark.sql.cassandra\") \\\r\n    .options(table=\"movie_details\", keyspace=\"movielens\") \\\r\n    .load()\r\n\r\n# Display result\r\nreadMovies.show(10)","dateUpdated":"2025-06-19T02:43:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+------+---------+---------+--------+------+-----+-----------+-----+-------+---------+------+-------+-------+------------+-------+------+--------+--------------------+-------+--------------------+------------------+---+-------+\n|movie_id|action|adventure|animation|children|comedy|crime|documentary|drama|fantasy|film_noir|horror|musical|mystery|release_date|romance|sci_fi|thriller|               title|unknown|                 url|video_release_date|war|western|\n+--------+------+---------+---------+--------+------+-----+-----------+-----+-------+---------+------+-------+-------+------------+-------+------+--------+--------------------+-------+--------------------+------------------+---+-------+\n|     201|     1|        1|        0|       0|     1|    0|          0|    0|      0|        0|     1|      0|      0| 01-Jan-1987|      0|     0|       0| Evil Dead II (1987)|      0|http://us.imdb.co...|                  |  0|      0|\n|    1235|     0|        0|        0|       0|     0|    1|          0|    0|      0|        0|     0|      0|      0| 01-Jan-1994|      0|     0|       0|Big Bang Theory, ...|      0|http://us.imdb.co...|                  |  0|      0|\n|     837|     0|        0|        0|       0|     0|    0|          0|    1|      0|        0|     0|      0|      0| 01-Jan-1941|      0|     0|       0|Meet John Doe (1941)|      0|http://us.imdb.co...|                  |  0|      0|\n|     670|     0|        0|        0|       0|     0|    0|          0|    0|      0|        0|     1|      0|      0| 01-Jan-1993|      0|     1|       1|Body Snatchers (1...|      0|http://us.imdb.co...|                  |  0|      0|\n|     570|     0|        0|        0|       0|     0|    0|          0|    0|      0|        0|     0|      0|      0| 01-Jan-1994|      0|     0|       0|   Wyatt Earp (1994)|      0|http://us.imdb.co...|                  |  0|      1|\n|     883|     0|        0|        0|       0|     0|    0|          0|    1|      0|        0|     0|      0|      0| 01-Jan-1997|      0|     0|       0|Telling Lies in A...|      0|http://us.imdb.co...|                  |  0|      0|\n|     899|     0|        0|        0|       0|     0|    0|          0|    1|      0|        0|     0|      0|      0| 01-Jan-1997|      0|     0|       0|Winter Guest, The...|      0|http://us.imdb.co...|                  |  0|      0|\n|     360|     0|        0|        0|       0|     0|    0|          1|    0|      0|        0|     0|      0|      0| 01-Jan-1997|      0|     0|       0|   Wonderland (1997)|      0|http://us.imdb.co...|                  |  0|      0|\n|     707|     0|        0|        0|       0|     0|    0|          0|    1|      0|        0|     0|      0|      0| 01-Jan-1991|      0|     0|       0|Enchanted April (...|      0|http://us.imdb.co...|                  |  0|      0|\n|    1301|     0|        0|        0|       0|     1|    0|          0|    0|      0|        0|     0|      0|      0| 01-Jan-1981|      0|     0|       0|      Stripes (1981)|      0|http://us.imdb.co...|                  |  0|      0|\n+--------+------+---------+---------+--------+------+-----+-----------+-----+-------+---------+------+-------+-------+------------+-------+------+--------+--------------------+-------+--------------------+------------------+---+-------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750300995023_1384491812","id":"20250618-095743_777861493","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8064"},{"text":"%md\n### 1) Calculate the average rating for each movie.\n","dateUpdated":"2025-06-19T02:43:15+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>1) Calculate the average rating for each movie.</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995023_1384491812","id":"20250619-020018_866839250","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8065"},{"text":"%pyspark\r\n\r\nfrom pyspark.sql.functions import avg\r\n\r\n# Join ratings and movie metadata on movie_id\r\njoined_df = readRatings.join(readMovies, on=\"movie_id\")\r\n\r\n# Group by title and compute average rating\r\navg_ratings_df = joined_df.groupBy(\"title\").agg(avg(\"rating\").alias(\"avg_rating\"))\r\n\r\n# Order by average rating descending and get top 20\r\ntop_20_movies = avg_ratings_df.orderBy(\"avg_rating\", ascending=False).limit(20)\r\n\r\n# Show the result\r\ntop_20_movies.show()\r\n","dateUpdated":"2025-06-19T02:43:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+-----------------+\n|               title|       avg_rating|\n+--------------------+-----------------+\n|Saint of Fort Was...|              5.0|\n|     Star Kid (1997)|              5.0|\n|Entertaining Ange...|              5.0|\n|They Made Me a Cr...|              5.0|\n|  Prefontaine (1997)|              5.0|\n|Aiqing wansui (1994)|              5.0|\n|Marlene Dietrich:...|              5.0|\n|Someone Else's Am...|              5.0|\n|Great Day in Harl...|              5.0|\n|Santa with Muscle...|              5.0|\n|Pather Panchali (...|            4.625|\n|      Everest (1998)|              4.5|\n|Maya Lin: A Stron...|              4.5|\n|         Anna (1996)|              4.5|\n|Some Mother's Son...|              4.5|\n|Close Shave, A (1...|4.491071428571429|\n|Schindler's List ...|4.466442953020135|\n|Wrong Trousers, T...|4.466101694915254|\n|   Casablanca (1942)| 4.45679012345679|\n|Wallace & Gromit:...|4.447761194029851|\n+--------------------+-----------------+\n\n"}]},"apps":[],"jobName":"paragraph_1750300995023_1384491812","id":"20250619-021041_457148047","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8066"},{"text":"%md\nAbove shows average rating for each movie in this dataset by order. There 10 movies have full start 5/5 for movie rating from the users. ","user":"anonymous","dateUpdated":"2025-06-19T02:57:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750301458048_-902043542","id":"20250619-025058_33155707","dateCreated":"2025-06-19T02:50:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8810","dateFinished":"2025-06-19T02:57:13+0000","dateStarted":"2025-06-19T02:57:13+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Above shows average rating for each movie in this dataset by order. There 10 movies have full start 5/5 for movie rating from the users.</p>\n"}]}},{"text":"%md\n### 2) Identify the top ten movies with the highest average ratings.\n","dateUpdated":"2025-06-19T02:51:00+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>2) Identify the top ten movies with the highest average ratings.</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995023_1384491812","id":"20250619-021126_1236451609","dateCreated":"2025-06-19T02:43:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8067","user":"anonymous","dateFinished":"2025-06-19T02:51:00+0000","dateStarted":"2025-06-19T02:51:00+0000"},{"text":"%pyspark\n\ntop_20_movies.limit(10).show()","dateUpdated":"2025-06-19T02:43:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----------+\n|               title|avg_rating|\n+--------------------+----------+\n|Aiqing wansui (1994)|       5.0|\n|Saint of Fort Was...|       5.0|\n|Marlene Dietrich:...|       5.0|\n|     Star Kid (1997)|       5.0|\n|Someone Else's Am...|       5.0|\n|Great Day in Harl...|       5.0|\n|Entertaining Ange...|       5.0|\n|They Made Me a Cr...|       5.0|\n|Santa with Muscle...|       5.0|\n|  Prefontaine (1997)|       5.0|\n+--------------------+----------+\n\n"}]},"apps":[],"jobName":"paragraph_1750300995023_1384491812","id":"20250619-022648_702102457","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8068"},{"text":"%md \nTable above show top 10 movies have higher average rating which reflecting their enduring popularity and critical acclaim. ","user":"anonymous","dateUpdated":"2025-06-19T02:56:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750301626660_-1862683280","id":"20250619-025346_1471665774","dateCreated":"2025-06-19T02:53:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8903","dateFinished":"2025-06-19T02:56:51+0000","dateStarted":"2025-06-19T02:56:51+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Table above show top 10 movies have higher average rating which reflecting their enduring popularity and critical acclaim.</p>\n"}]}},{"text":"%md\n### 3) Find the users who have rated at least 50 movies and identify their favourite movie genres.","dateUpdated":"2025-06-19T02:43:15+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>3) Find the users who have rated at least 50 movies and identify their favourite movie genres.</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995024_1394880033","id":"20250619-022702_1704315430","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8069"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import col, count, row_number, lit\nfrom pyspark.sql.window import Window\n\n# Step 1: Filter users who rated at least 50 movies\nfiltered_users = readRatings.groupBy(\"user_id\") \\\n    .agg(count(\"*\").alias(\"num_ratings\")) \\\n    .filter(col(\"num_ratings\") >= 50) \\\n    .select(\"user_id\")\n\n# Step 2: Join ratings with filtered users and movie metadata\nfiltered_ratings = readRatings \\\n    .join(filtered_users, on=\"user_id\") \\\n    .join(readMovies, on=\"movie_id\") \n\n# Step 3: Define genre columns (matching Cassandra schema)\ngenre_columns = [\n    \"unknown\", \"action\", \"adventure\", \"animation\", \"children\", \"comedy\", \"crime\",\n    \"documentary\", \"drama\", \"fantasy\", \"film_noir\", \"horror\", \"musical\",\n    \"mystery\", \"romance\", \"sci_fi\", \"thriller\", \"war\", \"western\"\n]\n\n# Step 4: Manually unpivot genre columns by filtering where genre == 1\nuser_genres = None\nfor genre in genre_columns:\n    temp = filtered_ratings.filter(col(genre) == 1) \\\n        .select(\"user_id\") \\\n        .withColumn(\"genre\", lit(genre))\n    user_genres = temp if user_genres is None else user_genres.union(temp)\n\n# Step 5: Count how many times each user watched each genre\nuser_genre_counts = user_genres.groupBy(\"user_id\", \"genre\") \\\n    .agg(count(\"*\").alias(\"count\"))\n\n# Step 6: Rank genres for each user by count descending\nwindowSpec = Window.partitionBy(\"user_id\").orderBy(col(\"count\").desc())\nranked_genres = user_genre_counts.withColumn(\"rank\", row_number().over(windowSpec))\n\n# Step 7: Keep only the top genre for each user\ntop_genres_per_user = ranked_genres.filter(col(\"rank\") == 1) \\\n    .orderBy(col(\"count\").desc())\n\n# Display result\ntop_genres_per_user.select(\"user_id\", \"genre\", \"count\").show(truncate=False)\n\n","dateUpdated":"2025-06-19T02:43:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+------+-----+\n|user_id|genre |count|\n+-------+------+-----+\n|655    |drama |410  |\n|405    |drama |309  |\n|537    |drama |251  |\n|450    |drama |237  |\n|13     |drama |218  |\n|234    |drama |213  |\n|416    |drama |212  |\n|279    |comedy|211  |\n|201    |drama |196  |\n|393    |comedy|191  |\n|181    |drama |188  |\n|303    |comedy|184  |\n|334    |drama |174  |\n|90     |drama |173  |\n|378    |drama |170  |\n|276    |drama |168  |\n|429    |drama |167  |\n|474    |drama |166  |\n|293    |drama |165  |\n|308    |drama |163  |\n+-------+------+-----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750300995024_1394880033","id":"20250619-022734_1896813357","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8070"},{"text":"%md\nUsers engaged in rating multiple movies tend to favor genres like Drama and Comedy which indicating viewing habits and preferences. \nThis analysis helps in tailoring content recommendations and enhancing user experience by catering to specific genre interests of highly active users.","user":"anonymous","dateUpdated":"2025-06-19T03:03:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750301840908_-1777178724","id":"20250619-025720_1792585634","dateCreated":"2025-06-19T02:57:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9104","dateFinished":"2025-06-19T02:58:56+0000","dateStarted":"2025-06-19T02:58:56+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Users engaged in rating multiple movies tend to favor genres like Drama and Comedy which indicating viewing habits and preferences.\n<br  />This analysis helps in tailoring content recommendations and enhancing user experience by catering to specific genre interests of highly active users.</p>\n"}]}},{"text":"%md\n### 4) Find all the users who are less than 20 years old.","dateUpdated":"2025-06-19T02:43:15+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>4) Find all the users who are less than 20 years old.</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995024_1394880033","id":"20250619-023333_324914954","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8071"},{"text":"%pyspark\n\nyoung = readUsers.filter(\"age < 20\")\n\nyoung.show()\n","dateUpdated":"2025-06-19T02:43:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+-------------+--------+\n|user_id|age|gender|   occupation|zip_code|\n+-------+---+------+-------------+--------+\n|    642| 18|     F|      student|   95521|\n|    588| 18|     F|      student|   93063|\n|     30|  7|     M|      student|   55436|\n|    528| 18|     M|      student|   55104|\n|    674| 13|     F|      student|   55337|\n|    375| 17|     M|entertainment|   37777|\n|    851| 18|     M|        other|   29646|\n|    859| 18|     F|        other|   06492|\n|    813| 14|     F|      student|   02136|\n|     52| 18|     F|      student|   55105|\n|    397| 17|     M|      student|   27514|\n|    257| 17|     M|      student|   77005|\n|    221| 19|     M|      student|   20685|\n|    368| 18|     M|      student|   92113|\n|    507| 18|     F|       writer|   28450|\n|    624| 19|     M|      student|   30067|\n|    592| 18|     M|      student|   97520|\n|    434| 16|     F|      student|   49705|\n|    618| 15|     F|      student|   44212|\n|    471| 10|     M|      student|   77459|\n+-------+---+------+-------------+--------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750300995024_1394880033","id":"20250619-023549_1763344762","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8072"},{"text":"%md\nThe MovieLens data highlights that users under the age of 20 form a notable segment with occupations such as students, writers, and individuals in entertainment. \nThese younger users tend to explore a wide range of movie genres. While specific genre counts for these users are not shown directly in the top genre frequency table, \nthe overall genre trend across highly active users suggests a strong preference for Drama and followed by Comedy. \nThis implies that younger users are likely aligned with broader user behavior, favoring emotionally engaging and entertaining content. \nRecognizing these trends is essential for delivering age-targeted movie recommendations and improving user satisfaction among this demographic group.","user":"anonymous","dateUpdated":"2025-06-19T03:04:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750301968713_2007181333","id":"20250619-025928_1025749594","dateCreated":"2025-06-19T02:59:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9213","dateFinished":"2025-06-19T03:04:51+0000","dateStarted":"2025-06-19T03:04:51+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The MovieLens data highlights that users under the age of 20 form a notable segment with occupations such as students, writers, and individuals in entertainment.\n<br  />These younger users tend to explore a wide range of movie genres. While specific genre counts for these users are not shown directly in the top genre frequency table,\n<br  />the overall genre trend across highly active users suggests a strong preference for Drama and followed by Comedy.\n<br  />This implies that younger users are likely aligned with broader user behavior, favoring emotionally engaging and entertaining content.\n<br  />Recognizing these trends is essential for delivering age-targeted movie recommendations and improving user satisfaction among this demographic group.</p>\n"}]}},{"text":"%md\n### 5) Find all the users whose occupation is “scientist” and whose age is between 30 and 40 years old.","dateUpdated":"2025-06-19T02:59:31+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>5) Find all the users whose occupation is “scientist” and whose age is between 30 and 40 years old.</h3>\n"}]},"apps":[],"jobName":"paragraph_1750300995025_1394495284","id":"20250619-023628_2107942284","dateCreated":"2025-06-19T02:43:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8073","user":"anonymous","dateFinished":"2025-06-19T02:59:31+0000","dateStarted":"2025-06-19T02:59:31+0000"},{"text":"%pyspark\n\nscientist3040 = readUsers.filter(\n    (col(\"age\") > 30) & (col(\"age\") < 40) & (col(\"occupation\") == \"scientist\"))\n    \nscientist3040.show()\n","dateUpdated":"2025-06-19T02:43:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|    730| 31|     F| scientist|   32114|\n|    337| 37|     M| scientist|   10522|\n|    554| 32|     M| scientist|   62901|\n|     40| 38|     M| scientist|   27514|\n|     71| 39|     M| scientist|   98034|\n|    272| 33|     M| scientist|   53706|\n|    430| 38|     M| scientist|   98199|\n|    643| 39|     M| scientist|   55122|\n|    543| 33|     M| scientist|   95123|\n|    874| 36|     M| scientist|   37076|\n|    538| 31|     M| scientist|   21010|\n|     74| 39|     M| scientist|   T8H1N|\n|    183| 33|     M| scientist|   27708|\n|    107| 39|     M| scientist|   60466|\n+-------+---+------+----------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1750300995025_1394495284","id":"20250619-023622_1437394281","dateCreated":"2025-06-19T02:43:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8074"},{"text":"%md\nThe MovieLens dataset shows that users identified as scientists within the 30 to 40 age range make up a distinct group of mature and analytically minded viewers. \nThis demographic is predominantly male and geographically diverse. \nWhile this group’s individual genre counts are not directly displayed in the genre frequency table, the overall trends suggest that users with high engagement tend to prefer Drama and Comedy.\nUnderstanding these preferences can help tailor personalized recommendations that resonate with their intellectual and emotional interests, thereby enhancing their viewing experience and platform retention.","dateUpdated":"2025-06-19T03:08:10+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750300995027_1395264781","id":"20250619-023703_656422176","dateCreated":"2025-06-19T02:43:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8075","user":"anonymous","dateFinished":"2025-06-19T03:08:10+0000","dateStarted":"2025-06-19T03:08:10+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The MovieLens dataset shows that users identified as scientists within the 30 to 40 age range make up a distinct group of mature and analytically minded viewers.\n<br  />This demographic is predominantly male and geographically diverse.\n<br  />While this group’s individual genre counts are not directly displayed in the genre frequency table, the overall trends suggest that users with high engagement tend to prefer Drama and Comedy.\n<br  />Understanding these preferences can help tailor personalized recommendations that resonate with their intellectual and emotional interests, thereby enhancing their viewing experience and platform retention.</p>\n"}]}},{"text":"\n","user":"anonymous","dateUpdated":"2025-06-19T03:08:15+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750302489864_-2079701394","id":"20250619-030809_1762856952","dateCreated":"2025-06-19T03:08:09+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9348"}],"name":"P153478_Assignment3","id":"2KXRUJ6AE","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}